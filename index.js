// Generated by CoffeeScript 1.9.2
(function() {
  var hummus, merge;

  hummus = require('hummus');

  merge = require('merge');

  module.exports = function(opts) {
    var cfg, ctx, pageModifier, pdfWriter;
    pdfWriter = hummus.createWriterToModify(opts["in"], {
      modifiedFilePath: opts.out
    });
    pageModifier = new hummus.PDFPageModifier(pdfWriter, opts.pageNumber);
    
    //Check if the PDF is editable.
    try {
      if(pageModifier.contexts.length > 0) {
        ctx = pageModifier.startContext().getContext();
      }else{
        
        pdfWriter.end();
        throw new Error("PDF is not editable");
      }
    }catch(err){
      throw err;
    }
    
    ctx = pageModifier.startContext().getContext();
    cfg = {
      font: pdfWriter.getFontForFile(__dirname + "/SourceSansPro-Regular.ttf"),
      size: 14,
      colorspace: 'gray',
      color: 0x00
    };
    return {
      write: function(x, y, txt) {
        ctx.writeText(txt, x, y, cfg);
        return this;
      },
      end: function() {
        pageModifier.endContext().writePage();
        return pdfWriter.end();
      },
      cfg: function(cfgIn) {
        cfg = merge(cfg, cfgIn);
        if (cfg.fontPath) {
          cfg.font = pdfWriter.getFontForFile(cfg.fontPath);
          delete cfg.fontPath;
        }
        return this;
      },
      image: function(x, y, path, opts) {
        if (opts == null) {
          opts = {};
        }
        ctx.drawImage(x, y, path, opts);
        return this;
      },
      page: function(nPage) {
        pageModifier.endContext().writePage();
        pageModifier = new hummus.PDFPageModifier(pdfWriter, nPage);
        ctx = pageModifier.startContext().getContext();
        return this;
      },
      restoreCfg: function() {
        cfg = {
          font: pdfWriter.getFontForFile(__dirname + "/SourceSansPro-Regular.ttf"),
          size: 14,
          colorspace: 'gray',
          color: 0x00
        };
        return this;
      }
    };
  };

}).call(this);
